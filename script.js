// ================== GI·ªé H√ÄNG ==================
let cart = JSON.parse(localStorage.getItem("cart")) || [];

// C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng hi·ªÉn th·ªã tr√™n icon gi·ªè
function updateCartCount()
{
    const count = cart.reduce((sum, item) => sum + item.quantity, 0);
    const cartCountEl = document.getElementById("cart-count");

    if (cartCountEl)
    {
        if (count > 0)
        {
            cartCountEl.textContent = count;
            cartCountEl.classList.remove("hidden");
        } else
        {
            cartCountEl.classList.add("hidden");
        }
    }
}

// ================== TH√îNG B√ÅO TH√äM S·∫¢N PH·∫®M V√ÄO GI·ªé H√ÄNG ==================
function showToast(message, type = "success", product = null)
{
    const toast = document.getElementById("toast");
    if (!toast) return;

    let icon = "";
    let bg = "#333";

    if (type === "success")
    {
        icon = '<i class="fa-solid fa-circle-check"></i>';
        bg = "#4caf50";
    }
    if (type === "error")
    {
        icon = '<i class="fa-solid fa-circle-xmark"></i>';
        bg = "#f44336";
    }
    if (type === "info")
    {
        icon = '<i class="fa-solid fa-circle-info"></i>';
        bg = "#2196f3";
    }

    if (product)
    {
        toast.innerHTML = `
            ${icon}
            <img src="${product.image}" width="40" style="border-radius:6px">
            <div>
                <strong>${message}</strong><br>
                <small>${product.name}</small>
            </div>
        `;
    } else
    {
        toast.innerHTML = `${icon} <span>${message}</span>`;
    }

    toast.style.background = bg;

    toast.className = "show";

    setTimeout(() =>
    {
        toast.className = toast.className.replace("show", "");
    }, 3000);
}

// ================== TH√äM S·∫¢N PH·∫®M ==================
function addToCart(product)
{
    let existing = cart.find(item => item.name === product.name);
    if (existing)
    {
        existing.quantity += 1;
    } else
    {
        product.quantity = 1;
        cart.push(product);
    }

    localStorage.setItem("cart", JSON.stringify(cart));
    updateCartCount();

    showToast("ƒê√£ th√™m v√†o gi·ªè h√†ng!", "success", product);
}

// L·∫Øng nghe s·ª± ki·ªán khi b·∫•m n√∫t "Th√™m"
document.querySelectorAll(".add-to-cart").forEach((btn) =>
{
    btn.addEventListener("click", (e) =>
    {
        let card = e.target.closest(".product-card, .shop-card");

        let product = {
            name: card.querySelector("h3").innerText,
            price: card.querySelector(".price").childNodes[0].textContent.trim(),
            image: card.querySelector("img").src
        }; addToCart(product);
    });
});

// Khi load trang th√¨ c·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng lu√¥n
updateCartCount();

// ================== SLIDESHOW ==================
document.addEventListener("DOMContentLoaded", () =>
{
    let slideIndex = 1;
    showSlides(slideIndex);

    function plusSlides(n) { showSlides(slideIndex += n); }
    function currentSlide(n) { showSlides(slideIndex = n); }

    function showSlides(n)
    {
        let slides = document.getElementsByClassName("mySlides");
        let dots = document.getElementsByClassName("dot");

        if (slides.length === 0) return;

        if (n > slides.length) slideIndex = 1;
        if (n < 1) slideIndex = slides.length;

        for (let i = 0; i < slides.length; i++) slides[i].style.display = "none";
        for (let i = 0; i < dots.length; i++) dots[i].className = dots[i].className.replace(" active", "");

        slides[slideIndex - 1].style.display = "block";
        if (dots[slideIndex - 1]) dots[slideIndex - 1].className += " active";
    }

    // Expose functions
    window.plusSlides = plusSlides;
    window.currentSlide = currentSlide;

    // Auto slide
    setInterval(() => plusSlides(1), 4000);
});

// ================== L·ªåC & T√åM KI·∫æM ==================
document.addEventListener("DOMContentLoaded", () =>
{
    const checkboxes = document.querySelectorAll(".filter-checkbox");
    const products = document.querySelectorAll(".shop-card");
    const searchInput = document.getElementById("searchInput");

    function filterProducts()
    {
        const checked = Array.from(checkboxes).filter(cb => cb.checked).map(cb => cb.value);
        const keyword = searchInput?.value.toLowerCase() || "";

        products.forEach(item =>
        {
            const category = item.dataset.category;
            const name = item.querySelector("h3").textContent.toLowerCase();
            const matchCategory = checked.includes(category);
            const matchSearch = name.includes(keyword);

            item.style.display = (matchCategory && matchSearch) ? "block" : "none";
        });
    }

    checkboxes.forEach(cb => cb.addEventListener("change", filterProducts));
    searchInput?.addEventListener("input", filterProducts);
});

// T√çNH NƒÇNG THANH T√åM KI·∫æM
function search()
{
    let input = document.getElementById("searchInput").value.toLowerCase();
    let products = document.querySelectorAll(".product");

    products.forEach(product =>
    {
        let name = product.querySelector(".product-name").textContent.toLowerCase();

        if (name.includes(input))
        {
            product.style.display = "block"; // Hi·ªán s·∫£n ph·∫©m
        } else
        {
            product.style.display = "none"; // ·∫®n s·∫£n ph·∫©m
        }
    });
}

// CHATBOT
document.addEventListener("DOMContentLoaded", () =>
{
    const chatToggle = document.getElementById("chat-toggle");
    const chatbot = document.getElementById("chatbot");
    const chatClose = document.getElementById("chat-close");
    const chatSend = document.getElementById("chat-send");
    const chatInput = document.getElementById("chat-input");
    const chatBox = document.getElementById("chat-body");

    // C√¢u tr·∫£ l·ªùi m·∫´u
    // C√¢u tr·∫£ l·ªùi m·∫´u (m·ªü r·ªông FAQ)
    const botReplies = [
        { keywords: ["ch√†o", "hi", "hello", "xin ch√†o"], reply: "Xin ch√†o b·∫°n üëã! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n." },
        { keywords: ["t·∫°m bi·ªát", "bye", "h·∫πn g·∫∑p l·∫°i"], reply: "H·∫πn g·∫∑p l·∫°i b·∫°n üëã. Ch√∫c b·∫°n m·ªôt ng√†y t·ªët l√†nh!" },
        { keywords: ["gi√°", "bao nhi√™u", "cost", "price"], reply: "B·∫°n vui l√≤ng cho m√¨nh bi·∫øt t√™n s·∫£n ph·∫©m ƒë·ªÉ m√¨nh b√°o gi√° nh√© üí∞." },
        { keywords: ["mua", "ƒë·∫∑t h√†ng", "order"], reply: "B·∫°n c√≥ th·ªÉ b·∫•m n√∫t 'Th√™m v√†o gi·ªè' ho·∫∑c 'Mua ngay' ƒë·ªÉ ƒë·∫∑t h√†ng üõí." },
        { keywords: ["ship", "giao h√†ng", "v·∫≠n chuy·ªÉn"], reply: "B√™n m√¨nh h·ªó tr·ª£ giao h√†ng to√†n qu·ªëc üöö. Th·ªùi gian t·ª´ 2-5 ng√†y tu·ª≥ khu v·ª±c." },
        { keywords: ["li√™n h·ªá", "contact", "h·ªó tr·ª£"], reply: "B·∫°n c√≥ th·ªÉ li√™n h·ªá qua email support@tibiki.vn ho·∫∑c hotline 0123-456-789 ‚òéÔ∏è." },
        { keywords: ["khuy·∫øn m√£i", "sale", "gi·∫£m gi√°"], reply: "Hi·ªán t·∫°i shop c√≥ nhi·ªÅu ch∆∞∆°ng tr√¨nh khuy·∫øn m√£i h·∫•p d·∫´n üéâ. B·∫°n v√†o m·ª•c *Khuy·∫øn m√£i* ƒë·ªÉ xem chi ti·∫øt nh√©." },
        { keywords: ["thanh to√°n", "payment", "tr·∫£ ti·ªÅn"], reply: "Shop h·ªó tr·ª£ thanh to√°n qua COD (nh·∫≠n h√†ng tr·∫£ ti·ªÅn) üíµ v√† chuy·ªÉn kho·∫£n ng√¢n h√†ng üí≥." },
        { keywords: ["ƒë·ªãa ch·ªâ", "·ªü ƒë√¢u", "shop ·ªü ƒë√¢u"], reply: "ƒê·ªãa ch·ªâ shop: 123 Nguy·ªÖn Hu·ªá, Qu·∫≠n 1, TP.HCM üè¨." },
        { keywords: ["gi·ªù m·ªü c·ª≠a", "gi·ªù l√†m vi·ªác", "opening hours"], reply: "Shop m·ªü c·ª≠a t·ª´ 8:00 ‚Äì 21:00 (T2 ‚Äì CN) ‚è∞." },
        { keywords: ["b·∫£o h√†nh", "warranty"], reply: "C√°c s·∫£n ph·∫©m ƒëi·ªán t·ª≠ ƒë∆∞·ª£c b·∫£o h√†nh ch√≠nh h√£ng t·ª´ 6 ƒë·∫øn 24 th√°ng üîß." },
        { keywords: ["ƒë·ªïi tr·∫£", "return", "refund"], reply: "B·∫°n ƒë∆∞·ª£c ƒë·ªïi tr·∫£ trong v√≤ng 7 ng√†y n·∫øu s·∫£n ph·∫©m l·ªói do nh√† s·∫£n xu·∫•t üì¶." },
        { keywords: ["∆∞u ƒë√£i", "voucher", "coupon"], reply: "B·∫°n c√≥ th·ªÉ nh·∫≠p m√£ 'TIBIKI10' ƒë·ªÉ ƒë∆∞·ª£c gi·∫£m 10% cho ƒë∆°n h√†ng ƒë·∫ßu ti√™n üéüÔ∏è." },
        { keywords: ["th·ªùi gian giao", "bao l√¢u", "ship m·∫•y ng√†y"], reply: "N·ªôi th√†nh TP.HCM: 1-2 ng√†y üö¥. Ngo·∫°i t·ªânh: 3-5 ng√†y üöö." },
        { keywords: ["free ship", "mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn"], reply: "ƒê∆°n h√†ng tr√™n 500k s·∫Ω ƒë∆∞·ª£c mi·ªÖn ph√≠ v·∫≠n chuy·ªÉn üÜì." },
        { keywords: ["s·∫£n ph·∫©m m·ªõi", "h√†ng m·ªõi"], reply: "B·∫°n c√≥ th·ªÉ xem danh m·ª•c *S·∫£n ph·∫©m m·ªõi* ƒë·ªÉ c·∫≠p nh·∫≠t m·∫´u hot nh·∫•t üî•." },
        { keywords: ["h·∫øt h√†ng", "c√≤n h√†ng kh√¥ng"], reply: "B·∫°n vui l√≤ng cho m√¨nh t√™n s·∫£n ph·∫©m ƒë·ªÉ ki·ªÉm tra t√¨nh tr·∫°ng c√≤n h√†ng üõí." },
        { keywords: ["c√°ch mua", "h∆∞·ªõng d·∫´n mua"], reply: "B·∫°n ch·ªçn s·∫£n ph·∫©m ‚ûù b·∫•m 'Th√™m v√†o gi·ªè' ‚ûù v√†o gi·ªè h√†ng ‚ûù 'Thanh to√°n' üìù." },
        { keywords: ["feedback", "ƒë√°nh gi√°", "review"], reply: "B·∫°n c√≥ th·ªÉ xem ƒë√°nh gi√° s·∫£n ph·∫©m ·ªü cu·ªëi trang chi ti·∫øt s·∫£n ph·∫©m ‚≠ê." },
        { keywords: ["h·ªó tr·ª£ k·ªπ thu·∫≠t", "k·ªπ thu·∫≠t"], reply: "ƒê·ªôi ng≈© k·ªπ thu·∫≠t s·∫Ω h·ªó tr·ª£ b·∫°n t·ª´ 8h-21h m·ªói ng√†y üõ†Ô∏è." }
    ];


    // H√†m t√¨m c√¢u tr·∫£ l·ªùi
    function getBotReply(msg)
    {
        msg = msg.toLowerCase();
        for (let item of botReplies)
        {
            if (item.keywords.some(k => msg.includes(k)))
            {
                return "Bot: " + item.reply;
            }
        }
        return "Bot: Xin l·ªói, m√¨nh ch∆∞a hi·ªÉu √Ω b·∫°n üòÖ. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ: ch√†o, gi√°, mua, ship, li√™n h·ªá.";
    }

    // Th√™m tin nh·∫Øn v√†o khung chat
    function addMessage(sender, text)
    {
        const msg = document.createElement("div");
        msg.className = sender === "bot" ? "bot-msg" : "user-msg";
        msg.textContent = text;
        chatBox.appendChild(msg);
        chatBox.scrollTop = chatBox.scrollHeight;
    }

    // Khi m·ªü chatbot ==> ch√†o
    chatToggle.addEventListener("click", () =>
    {
        chatbot.style.display = "flex";
        chatBox.innerHTML = "";
        addMessage("bot", "Xin ch√†o! M√¨nh l√† Tibiki. B·∫°n c·∫ßn h·ªó tr·ª£ g√¨?");
    });

    if (chatClose)
    {
        chatClose.addEventListener("click", () =>
        {
            chatbot.style.display = "none";
        });
    }

    // G·ª≠i tin nh·∫Øn
    function sendChat()
    {
        const msg = chatInput.value.trim();
        if (!msg) return;

        addMessage("user", "B·∫°n: " + msg);
        chatInput.value = "";

        setTimeout(() =>
        {
            let reply = getBotReply(msg);
            addMessage("bot", reply);
        }, 500);
    }

    if (chatSend) chatSend.addEventListener("click", sendChat);
    if (chatInput) chatInput.addEventListener("keypress", e =>
    {
        if (e.key === "Enter") sendChat();
    });
});





